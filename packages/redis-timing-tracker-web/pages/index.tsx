import type { NextPage } from 'next'
import Head from 'next/head'
import dynamic from 'next/dynamic'
import { Center, Flex, Heading, Input } from '@chakra-ui/react'
import { AsyncSelect, SingleValue } from 'chakra-react-select'
import { useState } from 'react'


const Chart = dynamic(() => import('../components/Chart'), { ssr: false })

const Home: NextPage<{ data: { timestamp: number; value: number; }[]; testName: string; initValue: { value: string; label: string; } }> = ({ data, testName, initValue, }) => {
    const [chartData, setChartData] = useState(data);
    const [value, setValue] = useState<SingleValue<{ value: string; label: string; }>>(initValue);

    const fetchDuration = async (testName: string): Promise<{ timestamp: number; value: number; }[]> => {
        const url = new URL('http://localhost:3000/api/duration')
        url.searchParams.append('testName', testName);

        const response = await fetch(url) 
        return await response.json()
    }

    return (
        <div>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main>
                <Center as={Flex} flexDirection="column" gap={5}>
                    <Heading as="h2">{testName}</Heading>
                    <AsyncSelect placeholder="Select a test"
                        value={value}
                        onChange={v => {
                            setValue(v);
                            if (v?.value) {
                                fetchDuration(v?.value).then(setChartData);
                            }
                        }}
                        defaultOptions
                        loadOptions={(inputValue, callback) => {
                            const url = new URL('http://localhost:3000/api/tests')
                            url.searchParams.append('search', inputValue)

                            fetch(url).then(response => {
                                response.json().then(testsNames => {
                                    callback(testsNames.map((value: string) => ({ value: value, label: value })));
                                })
                            });
                        }}
                        chakraStyles={{ container: (provided) => ({ ...provided, width: '500px' }) }}
                    />
                    <Chart data={chartData} />
                </Center>
            </main>
        </div>
    )
}

export async function getStaticProps() {
    const testUrl = new URL('http://localhost:3000/api/tests')
    testUrl.searchParams.append('search', '')

    const testsResponse = await fetch(testUrl);
    const testsNames = await testsResponse.json();

    const fetchDuration = async (testName: string) => {
        const url = new URL('http://localhost:3000/api/duration')
        url.searchParams.append('testName', testName);
        return await fetch(url)
    }

    const firstTestName = testsNames[0];
    const response = await fetchDuration(firstTestName);


    if (!response.ok) {
        throw new Error('Cannot get testData')
    }

    const data = await response.json()

    const initValue = { value: firstTestName, label: firstTestName };

    return {
        props: {
            data,
            testName: 'Sum should return right result',
            initValue,
        }
    }
}

export default Home
